Provision and manage virtual machines from cloud providers (AWS)

Vimma is distributed under the BSD 3-clause license, see the file COPYING.

The DOC file has some explanations about the structure & features.


Dev Setup:

cp config/local_settings.py.example config/local_settings.py
# set the SECRET_KEY to a random string
# choose a DB (SQLite3 or PostgreSQL)

cp config/secrets.py.template config/secrets.py
# set the FUM_API_TOKEN used to retrieve Futurice users

cp config/dev_secrets.py.template config/dev_secrets.py
# set up AWS credentials for dev testing


Create a Python3 virtual enviroment and use it for most commands.
virtualenv -p python3 env
. env/bin/activate
pip install -r req.txt

During initial development don't use migrations. Instead, delete & create them
every time:
rm -rf vimmasite/vimma/migrations/0*.py
PYTHONPATH=config ./vimmasite/manage.py makemigrations


Running in a Vagrant VM (accept the dummy https certificate in your browser):

vagrant up
# Add ‘127.0.0.1	dev.futurice.com’ to /etc/resolv.conf
https://dev.futurice.com:8081/vimma/
https://dev.futurice.com:8081/vimma/test


Running on your machine:

PYTHONPATH=config ./vimmasite/manage.py test vimma --settings=test_settings --noinput
./scripts/polymerjs-reset.py	# install PolymerJS

mkdir -p vimmasite/static
PYTHONPATH=config ./vimmasite/manage.py collectstatic --noinput --clear --link

# reset DB, create all permissions and dummy data
PYTHONPATH=config ./scripts/dev-db-reset.py

rabbitmq-server
PYTHONPATH=config ./scripts/worker.py	# start celery worker
PYTHONPATH=config ./scripts/beat.py	# start celery beat (periodic task scheduler)
REMOTE_USER=u2 PYTHONPATH=config ./vimmasite/manage.py runserver

http://localhost:8000/vimma/
http://localhost:8000/vimma/test
